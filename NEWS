
toaster 0.2.x
----------------------------------------------------------------

NEW FEATURES

* New text analysis functions `computeTf` and `computeTfIdf` 
  process corpora in Aster and produce results compatible with package tm,
  in particular term document matrix.

* Both `computeTf` and `computeTfIdf` rank terms to return top ranked 
  ones. Ranking and number of terms to return are provided by 
  parameters `top` and `rankFunction`. Unlimited (all terms) are 
  returned by default with `top = NULL`.

* Text parsers `nGram` and `token` are pluggable into text functions
  above.

* Text functions support stop words in both Aster (installed stopwords file)
  and in R (post-processing of results).

* Linear regression now is compatible with R standard lm functions returning
  object of class c('toalm', 'lm'). This means methods `summary`, 
  `coefficients`, etc. work with the object returned by `computeLm`.
  This change is not backward compatible: to obtain result returned in 0.2.5 
  list contains element `old.result`.

* To compute results similar to `lm` `computeLm` uses sample (default 1000 
  rows) to calculate stats like residuals, R-square, etc. in Aster. As before, 
  linear regression coefficients are calculated on full data set with
  SQL/MR linreg function.

* `getTableSummary` is enabled for parallel execution. Simply create and 
  register parallel cluster of your choice with doParallel package and set
  parameter parallel=TRUE. Performance gains may be up to 50% or better 
  depending on size of the table, number of parallel processes, and number 
  of columns. Run `demo("baseball-parallel")` for examples.

* `computePercentiles` is enabled for parallel execution. Simply create and
  register parallel cluster of your choice with doParallel package and set
  parameter parallel=TRUE. Performance gains may be up to 50% or better 
  depending on size of the table, number of parallel processes, and number 
  of columns. Run `demo("baseball-parallel")` for examples.

* Added support of temporal Aster data types in `getTableSummary` and
  `computePercentiles`. Temporal types are date, time, timestamp, and interval.
  in `computePercentiles` set parameter temporal=TRUE to calculate 
  temporal columns and run it separately from numerical ones.

* Added factory functions `getDiscretePaletteFactory` and `getGradientPaletteFactory`
  to dynamically generate palettes with n number of colors. 

* Added utility function `isTable` checks if tables exist in Aster database.

MINOR FEATURES

* Parameter `formula` replaced defunct `expr` in the function `computeLm` 
  for consistency with other model-fitting functions.

* `computePercentiles` now computes on multiple columns.

* Reworked ODBC error handling to be more robust and informative.

* Added deprecated warning facility `toa_dep` similar to ggplot2 gg_dep 
  function.

BUG FIXES

* Legend position in `showData` histogram format is completely removed now
  when legendPosition="none".

* `computePercentiles` now returns no rows for the column that contains all NULLs. 
  Before it threw error without completing.

* fixed legend position in plotting functions.

* Added error when histogram start value is greater than end value in (Issue #33)

DOCUMENTAION

* Completely reworked demo scripts. Now they contain fully functional examples  
  running on baseball and openDallas data sets. The data sets are available 
  from bitbucket download: https://bitbucket.org/grigory/toaster/downloads
    - baseball.zip
    - DallasOpenData.zip

* Baseball data set now includes the latest Lahman data including 2013 season.


toaster 0.2.5
----------------------------------------------------------------

NEW FEATURES

* `computeSample`: randomly sample data from the table specifying
  fraction or size of desired data set.

* `createMap`: new visualization function for combining maps with data 
  artifacts from Aster database. Can be used to produce maps of 
  arbitrary scale (with exception of whole world) and type with shapes
  of size and labels corresponding to data computed in Aster. It uses 
  ggmap and ggplot2 packages and Google API for geocoding data as 
  necessary. It implements smart logic to choose map tiles to place
  geocoded data appropriately, and it also automatically geocodes 
  data if necessary (Google API restrictions apply).

* Due to geocoding and map API restrictions `createMap` supports 
  function caching suggesting function `memoise` of memoise package. 
  (other functions are fine too). Properly following suggested practices 
  should significantly optimize both peformance and API usage when geocoding
  or retrieving maps.

* `compute`: for executing arbitrary aggregations on Aster tables.

* `computeBarchart`: for computing data for barchart visualizations. This
  is different from `computeHistogram` as barchart is defined on factors
  (categorical data) witch doesn't support defining bins like in histograms.

* `computePercentiles`: for computing multiple percentiles across one or 
  many subsets of a table in one go. Results are suitable for function
  `createBoxplot` (see next).

* `createBoxplot`: visualizes boxplots for single column across one or
  multiple subsets.

* `computeLm`: compute linear model coefficients similar to lm function but
  all performed inside Aster.

ENHANCEMENTS

* added parameter `test` to compute- functions (functions that access and 
  manipulate data in Aster) to produce SQL without executing it. Thus, when 
  `test=TRUE` function returns string containing SQL that would have run
  in Aster.

* package depedencies moved from Depends to Imports section of DESCRIPTION file 
  except for RODBC package. Keeping RODBC in Depends because toaster requires 
  access to RODBC connection object and to its function `odbcConnect`. Other 
  packages are not exposed by toaster functions so accessing them would have 
  been needed only for advanced usage (if any).
  if you use any function from the packages other than RODBC then those packages 
  should be loaded with `library` or `require` or use their namespace. 

* facet parameter now supports both one-value and 2-value vector (if parameter 
  is longer than the rest of values are ignored). Single value defines column
  name for wrapping facets in 1 or more column lattice. Two values define pair
  of columns to place facets in 2-dimensional grid for each combination of 
  values found.

* `createHistogram` supports trend lines with parameter trendLine=TRUE.

* `computeHeatmap` converts dimension and facet columns to factors by default.
  If undesired set parameter dimAsFactor = FALSE to disable (not recommended
  with heat maps). 

* `computeHeatmap` now supports withMelt to melt result using function melt
  from package reshape2. This option simplifies visualizating with facets.

* `createBubblechart` now supports scaling shapes by size (default) or by area.
  Correspondingly, use shapeSizeRange when scaling by size; and shapeMaxSize
  when scaling by area.

* `createBubblechart` added parameters to control label positioning and 
  formatting. All parameters that position and format label text start
  with prefix "label" now. Old parameters textSize, textColour, and 
  textVJust renamed to labelSize, labelColour, labelVJust. 

* `createPopPyramid` support for facets.

* added utility method to list Aster data types: `getNumericTypes`, 
  `getCharacterTypes`, `getTemporalTypes`.

* `computeAggregates` is not an alias anymore and it replaced function
  `compute` which is no more.

